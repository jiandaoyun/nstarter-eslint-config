{
    "@typescript-eslint/adjacent-overload-signatures": {
        "name": "@typescript-eslint/adjacent-overload-signatures",
        "value": "error",
        "description": "重载的函数必须写在一起",
        "category": "",
        "badExample": "<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> NSFoo1 <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <mark class=\"eslint-error\" data-tip=\"All &apos;foo&apos; signatures should be adjacent.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/adjacent-overload-signatures)&lt;/span&gt;\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></mark>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> TypeFoo1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <mark class=\"eslint-error\" data-tip=\"All &apos;foo&apos; signatures should be adjacent.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/adjacent-overload-signatures)&lt;/span&gt;\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>sn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></mark>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFoo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <mark class=\"eslint-error\" data-tip=\"All &apos;foo&apos; signatures should be adjacent.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/adjacent-overload-signatures)&lt;/span&gt;\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>sn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></mark>\n<span class=\"token punctuation\">}</span>",
        "goodExample": "<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> NSFoo2 <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> TypeFoo2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>sn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFoo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>sn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>",
        "reason": "增加可读性"
    },
    "@typescript-eslint/array-type": {
        "name": "@typescript-eslint/array-type",
        "value": "off",
        "description": "限制数组类型必须使用 Array<T> 或 T[]",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "允许灵活运用两者"
    },
    "@typescript-eslint/await-thenable": {
        "name": "@typescript-eslint/await-thenable",
        "value": "off",
        "description": "禁止对没有 then 方法的对象使用 await",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/ban-ts-ignore": {
        "name": "@typescript-eslint/ban-ts-ignore",
        "value": "off",
        "description": "是否允许使用 // @ts-ignore 来忽略编译错误",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "既然已经使用注释来忽略编译错误了，说明已经清楚可能带来的后果"
    },
    "@typescript-eslint/ban-types": {
        "name": "@typescript-eslint/ban-types",
        "value": [
            "error",
            {
                "types": {
                    "Object": { "message": "Use '{}' instead", "fixWith": "{}" },
                    "String": { "message": "Use 'string' instead", "fixWith": "string" },
                    "Number": { "message": "Use 'number' instead", "fixWith": "number" },
                    "Boolean": { "message": "Use 'boolean' instead", "fixWith": "boolean" }
                }
            }
        ],
        "description": "禁止使用指定的类型\n不使用 Object, String, Number, Boolean 类型，而使用原生的 ts 类型",
        "category": "",
        "badExample": "<span class=\"token keyword\">let</span> foo<span class=\"token punctuation\">:</span> <mark class=\"eslint-error\" data-tip=\"Don&apos;t use &apos;Object&apos; as a type. Use &apos;{}&apos; instead&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/ban-types)&lt;/span&gt;\">Object</mark> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bar<span class=\"token punctuation\">:</span> <mark class=\"eslint-error\" data-tip=\"Don&apos;t use &apos;String&apos; as a type. Use &apos;string&apos; instead&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/ban-types)&lt;/span&gt;\">String</mark> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> baz<span class=\"token punctuation\">:</span> <mark class=\"eslint-error\" data-tip=\"Don&apos;t use &apos;Number&apos; as a type. Use &apos;number&apos; instead&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/ban-types)&lt;/span&gt;\">Number</mark> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> qux<span class=\"token punctuation\">:</span> <mark class=\"eslint-error\" data-tip=\"Don&apos;t use &apos;Boolean&apos; as a type. Use &apos;boolean&apos; instead&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/ban-types)&lt;/span&gt;\">Boolean</mark> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token keyword\">let</span> foo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> baz<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> qux<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>",
        "reason": "统一代码风格"
    },
    "@typescript-eslint/camelcase": {
        "name": "@typescript-eslint/camelcase",
        "value": "off",
        "description": "变量名必须是 camelcase 风格的",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "很多 api 或文件名都不是 camelcase 风格的"
    },
    "@typescript-eslint/class-name-casing": {
        "name": "@typescript-eslint/class-name-casing",
        "value": "error",
        "description": "类名与接口名必须为驼峰式",
        "category": "",
        "badExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\"><mark class=\"eslint-error\" data-tip=\"Class &apos;Invalid_Class_Name&apos; must be PascalCased.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/class-name-casing)&lt;/span&gt;\">Invalid_Class_Name</mark></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><mark class=\"eslint-error\" data-tip=\"Interface &apos;invalidInterface&apos; must be PascalCased.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/class-name-casing)&lt;/span&gt;\">invalidInterface</mark></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>",
        "goodExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">ValidClassName</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ValidInterface</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
    },
    "@typescript-eslint/consistent-type-assertions": {
        "name": "@typescript-eslint/consistent-type-assertions",
        "value": ["error", { "assertionStyle": "as", "objectLiteralTypeAssertions": "never" }],
        "description": "类型断言必须使用 as Type，禁止使用 <Type>，禁止对对象字面量进行类型断言（断言成 any 是允许的）",
        "category": "",
        "badExample": "<span class=\"token keyword\">let</span> bar1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> foo1 <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Use &apos;as string&apos; instead of &apos;&lt;string&gt;&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/consistent-type-assertions)&lt;/span&gt;\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>bar1</mark><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> baz1 <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Always prefer const x: T = { ... }.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/consistent-type-assertions)&lt;/span&gt;\"><span class=\"token punctuation\">{</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> object</mark><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token keyword\">let</span> bar2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> foo2 <span class=\"token operator\">=</span> bar2 <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> baz2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>",
        "reason": "<Type> 容易被理解为 jsx"
    },
    "@typescript-eslint/consistent-type-definitions": {
        "name": "@typescript-eslint/consistent-type-definitions",
        "value": ["error", "interface"],
        "description": "优先使用 interface 而不是 type",
        "category": "",
        "badExample": "<span class=\"token keyword\">type</span> <mark class=\"eslint-error\" data-tip=\"Use an `interface` instead of a `type`&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/consistent-type-definitions)&lt;/span&gt;\">Foo1</mark> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>",
        "reason": "interface 可以 implement, extend 和 merge"
    },
    "@typescript-eslint/explicit-function-return-type": {
        "name": "@typescript-eslint/explicit-function-return-type",
        "value": "off",
        "description": "函数返回值必须与声明的类型一致",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "编译阶段检查就足够了"
    },
    "@typescript-eslint/explicit-member-accessibility": {
        "name": "@typescript-eslint/explicit-member-accessibility",
        "value": [
            "error",
            { "accessibility": "explicit", "overrides": { "constructors": "no-public" } }
        ],
        "description": "必须设置类的成员的可访问性\n特殊规则，对于 constructor，不要求指定其 public 状态。",
        "category": "",
        "badExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on class property foo.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/explicit-member-accessibility)&lt;/span&gt;\"><span class=\"token keyword\">static</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on method definition getFoo.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/explicit-member-accessibility)&lt;/span&gt;\"><span class=\"token keyword\">static</span> <span class=\"token function\">getFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Foo2<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></mark>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on class property bar.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/explicit-member-accessibility)&lt;/span&gt;\">bar <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on method definition getBar.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/explicit-member-accessibility)&lt;/span&gt;\"><span class=\"token function\">getBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on get property accessor baz.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/explicit-member-accessibility)&lt;/span&gt;\"><span class=\"token keyword\">get</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on set property accessor baz.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/explicit-member-accessibility)&lt;/span&gt;\"><span class=\"token keyword\">set</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></mark>\n<span class=\"token punctuation\">}</span>",
        "goodExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Foo2<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">get</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">set</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>",
        "reason": "将不需要公开的成员设为私有的，可以增强代码的可理解性，对文档输出也很友好"
    },
    "@typescript-eslint/generic-type-naming": {
        "name": "@typescript-eslint/generic-type-naming",
        "value": "off",
        "description": "约束泛型的命名规则",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/indent": {
        "name": "@typescript-eslint/indent",
        "value": "off",
        "description": "缩进规定为 4 空格",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "已被 javascript 规则覆盖，无需重复指定。"
    },
    "@typescript-eslint/interface-name-prefix": {
        "name": "@typescript-eslint/interface-name-prefix",
        "value": "off",
        "description": "接口名称必须以 I 开头",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/member-delimiter-style": {
        "name": "@typescript-eslint/member-delimiter-style",
        "value": [
            "error",
            {
                "multiline": { "delimiter": "semi", "requireLast": true },
                "singleline": { "delimiter": "semi", "requireLast": false },
                "overrides": {
                    "typeLiteral": {
                        "multiline": { "delimiter": "comma", "requireLast": false },
                        "singleline": { "delimiter": "comma", "requireLast": false }
                    }
                }
            }
        ],
        "description": "统一成员属性的分隔符形式\n对于对象或 Interface 声明，使用 ;。对于 type 声明使用 ,。",
        "category": "",
        "badExample": "<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ITest1</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> TTest2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> TTest3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><mark class=\"eslint-error\" data-tip=\"Unexpected separator (,).&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/member-delimiter-style)&lt;/span&gt;\"> </mark><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> test4<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><mark class=\"eslint-error\" data-tip=\"Expected a semicolon.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/member-delimiter-style)&lt;/span&gt;\"></mark><mark class=\"eslint-error\" data-tip=\"Expected a comma.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/member-delimiter-style)&lt;/span&gt;\"></mark><mark class=\"eslint-error\" data-tip=\"Unexpected separator (,).&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/member-delimiter-style)&lt;/span&gt;\"></mark><mark class=\"eslint-error\" data-tip=\"Expected a comma.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/member-delimiter-style)&lt;/span&gt;\"></mark><mark class=\"eslint-error\" data-tip=\"Unexpected separator (,).&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/member-delimiter-style)&lt;/span&gt;\"></mark>",
        "goodExample": "<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ITest1</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> TTest2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> TTest3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> test4<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>",
        "reason": "统一代码风格"
    },
    "@typescript-eslint/member-naming": {
        "name": "@typescript-eslint/member-naming",
        "value": "off",
        "description": "私有成员必须以 _ 开头",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "已有 private 修饰符了，没必要限制变量名"
    },
    "@typescript-eslint/member-ordering": {
        "name": "@typescript-eslint/member-ordering",
        "value": [
            "warn",
            {
                "default": [
                    "static-field",
                    "instance-field",
                    "public-constructor",
                    "protected-constructor",
                    "private-constructor",
                    "private-static-method",
                    "protected-static-method",
                    "public-static-method"
                ]
            }
        ],
        "description": "成员属性定义过程的指导性顺序约束\n不做强制性要求",
        "category": "",
        "badExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">getBar3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token function\">getBar2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getBar1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Foo1<span class=\"token punctuation\">.</span><span class=\"token function\">getFoo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBar3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <mark class=\"eslint-error\" data-tip=\"Member bar3 should be declared before all public constructor definitions.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/member-ordering)&lt;/span&gt;\"><span class=\"token keyword\">private</span> bar3 <span class=\"token operator\">=</span> <span class=\"token string\">'bar3'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member bar2 should be declared before all public constructor definitions.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/member-ordering)&lt;/span&gt;\"><span class=\"token keyword\">protected</span> bar2 <span class=\"token operator\">=</span> <span class=\"token string\">'bar2'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member bar1 should be declared before all public constructor definitions.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/member-ordering)&lt;/span&gt;\"><span class=\"token keyword\">public</span> bar1 <span class=\"token operator\">=</span> <span class=\"token string\">'bar1'</span><span class=\"token punctuation\">;</span></mark>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Foo1<span class=\"token punctuation\">.</span>foo3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <mark class=\"eslint-error\" data-tip=\"Member foo3 should be declared before all public constructor definitions.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/member-ordering)&lt;/span&gt;\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> foo3 <span class=\"token operator\">=</span> <span class=\"token string\">'foo3'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member foo2 should be declared before all public constructor definitions.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/member-ordering)&lt;/span&gt;\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> foo2 <span class=\"token operator\">=</span> <span class=\"token string\">'foo2'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member foo1 should be declared before all public constructor definitions.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/member-ordering)&lt;/span&gt;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> foo1 <span class=\"token operator\">=</span> <span class=\"token string\">'foo1'</span><span class=\"token punctuation\">;</span></mark>\n<span class=\"token punctuation\">}</span>",
        "goodExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> foo1 <span class=\"token operator\">=</span> <span class=\"token string\">'foo1'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> foo2 <span class=\"token operator\">=</span> <span class=\"token string\">'foo2'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> foo3 <span class=\"token operator\">=</span> <span class=\"token string\">'foo3'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Foo2<span class=\"token punctuation\">.</span>foo3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> bar1 <span class=\"token operator\">=</span> <span class=\"token string\">'bar1'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> bar2 <span class=\"token operator\">=</span> <span class=\"token string\">'bar2'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> bar3 <span class=\"token operator\">=</span> <span class=\"token string\">'bar3'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Foo2<span class=\"token punctuation\">.</span><span class=\"token function\">getFoo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBar3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getBar1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token function\">getBar2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">getBar3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>",
        "reason": "优先级：\n1. static > instance\n2. field > constructor > method\n3. public > protected > private"
    },
    "@typescript-eslint/no-array-constructor": {
        "name": "@typescript-eslint/no-array-constructor",
        "value": "off",
        "description": "禁止使用 Array 构造函数",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/no-empty-interface": {
        "name": "@typescript-eslint/no-empty-interface",
        "value": "off",
        "description": "禁止定义空的接口",
        "category": "",
        "badExample": "<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>",
        "goodExample": "<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>",
        "reason": "允许定义空的接口作为基础类型声明"
    },
    "@typescript-eslint/no-explicit-any": {
        "name": "@typescript-eslint/no-explicit-any",
        "value": "off",
        "description": "禁止使用 any",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/no-extraneous-class": {
        "name": "@typescript-eslint/no-extraneous-class",
        "value": "off",
        "description": "禁止定义没必要的类，比如只有静态方法的类",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/no-for-in-array": {
        "name": "@typescript-eslint/no-for-in-array",
        "value": "off",
        "description": "禁止对 array 使用 for in 循环",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/no-inferrable-types": {
        "name": "@typescript-eslint/no-inferrable-types",
        "value": "error",
        "description": "禁止给一个初始化时直接赋值为 number, string 的变量显式的声明类型",
        "category": "",
        "badExample": "<span class=\"token keyword\">const</span> <mark class=\"eslint-error\" data-tip=\"Type number trivially inferred from a number literal, remove type annotation.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/no-inferrable-types)&lt;/span&gt;\">foo1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></mark><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <mark class=\"eslint-error\" data-tip=\"Type string trivially inferred from a string literal, remove type annotation.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/no-inferrable-types)&lt;/span&gt;\">bar1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span></mark><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token keyword\">const</span> foo2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bar2 <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>",
        "reason": "可以简化代码"
    },
    "@typescript-eslint/no-magic-numbers": {
        "name": "@typescript-eslint/no-magic-numbers",
        "value": "off",
        "description": "禁止使用 magic numbers",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/no-misused-new": {
        "name": "@typescript-eslint/no-misused-new",
        "value": "off",
        "description": "禁止在接口中定义 constructor，或在类中定义 new",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/no-misused-promises": {
        "name": "@typescript-eslint/no-misused-promises",
        "value": "off",
        "description": "避免错误的使用 Promise",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/no-namespace": {
        "name": "@typescript-eslint/no-namespace",
        "value": ["error", { "allowDeclarations": true, "allowDefinitionFiles": true }],
        "description": "禁止使用 namespace 来定义命名空间",
        "category": "",
        "badExample": "<mark class=\"eslint-error\" data-tip=\"ES2015 module syntax is preferred over custom TypeScript modules and namespaces.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/no-namespace)&lt;/span&gt;\"><span class=\"token keyword\">namespace</span> foo1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>",
        "goodExample": "<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> foo1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>",
        "reason": "使用 es6 引入模块，才是更标准的方式。\n但是允许使用 declare namespace ... {} 来定义外部命名空间"
    },
    "@typescript-eslint/no-non-null-assertion": {
        "name": "@typescript-eslint/no-non-null-assertion",
        "value": "off",
        "description": "禁止使用 non-null 断言（感叹号）",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "使用 non-null 断言时就已经清楚了风险"
    },
    "@typescript-eslint/no-object-literal-type-assertion": {
        "name": "@typescript-eslint/no-object-literal-type-assertion",
        "value": ["error", { "allowAsParameter": true }],
        "description": "禁止对对象字面量进行类型断言转换。",
        "category": "",
        "badExample": "<span class=\"token keyword\"><mark class=\"eslint-error\" data-tip=\"Definition for rule &apos;@typescript-eslint/no-object-literal-type-assertion&apos; was not found.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/no-object-literal-type-assertion)&lt;/span&gt;\">l</mark>et</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Foo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span> <span class=\"token keyword\">as</span> Foo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token keyword\">as</span> Foo<span class=\"token punctuation\">;</span>",
        "reason": "避免破坏类型检查\n特殊规则，允许对参数进行断言处理。"
    },
    "@typescript-eslint/no-parameter-properties": {
        "name": "@typescript-eslint/no-parameter-properties",
        "value": "error",
        "description": "禁止给类的构造函数的参数添加修饰符",
        "category": "",
        "badExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><mark class=\"eslint-error\" data-tip=\"Property name cannot be declared in the constructor.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/no-parameter-properties)&lt;/span&gt;\"><span class=\"token keyword\">private</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></mark></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>",
        "goodExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>"
    },
    "@typescript-eslint/no-require-imports": {
        "name": "@typescript-eslint/no-require-imports",
        "value": "error",
        "description": "禁止使用 require\n原则上禁止动态引用，对于循环依赖，通过 IOC 的方式解决。",
        "category": "",
        "badExample": "<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"A `require()` style import is forbidden.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/no-require-imports)&lt;/span&gt;\"><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></mark><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span><span class=\"token punctuation\">;</span>",
        "reason": "统一使用 import 来引入模块，特殊情况使用单行注释允许 require 引入"
    },
    "@typescript-eslint/no-this-alias": {
        "name": "@typescript-eslint/no-this-alias",
        "value": ["error", { "allowDestructuring": true }],
        "description": "禁止将 this 赋值给其他变量，除非是解构赋值",
        "category": "",
        "badExample": "<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <mark class=\"eslint-error\" data-tip=\"Unexpected aliasing of &apos;this&apos; to local variable.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/no-this-alias)&lt;/span&gt;\">self</mark> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>",
        "goodExample": "<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> bar <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"
    },
    "@typescript-eslint/no-type-alias": {
        "name": "@typescript-eslint/no-type-alias",
        "value": "off",
        "description": "禁止使用类型别名",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/no-unnecessary-qualifier": {
        "name": "@typescript-eslint/no-unnecessary-qualifier",
        "value": "off",
        "description": "在命名空间中，可以直接使用内部变量，不需要添加命名空间前缀",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/no-unnecessary-type-assertion": {
        "name": "@typescript-eslint/no-unnecessary-type-assertion",
        "value": "off",
        "description": "禁止无用的类型断言",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/no-unused-vars": {
        "name": "@typescript-eslint/no-unused-vars",
        "value": "off",
        "description": "已定义的变量必须使用",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "编译阶段检查就足够了"
    },
    "@typescript-eslint/no-use-before-define": {
        "name": "@typescript-eslint/no-use-before-define",
        "value": "off",
        "description": "禁止在定义变量之前就使用它",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "编译阶段检查就足够了"
    },
    "@typescript-eslint/no-useless-constructor": {
        "name": "@typescript-eslint/no-useless-constructor",
        "value": "error",
        "description": "禁止出现没必要的 constructor",
        "category": "",
        "badExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span>\n    <mark class=\"eslint-error\" data-tip=\"Useless constructor.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/no-useless-constructor)&lt;/span&gt;\"><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span>\n    <mark class=\"eslint-error\" data-tip=\"Useless constructor.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/no-useless-constructor)&lt;/span&gt;\"><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></mark>\n<span class=\"token punctuation\">}</span>",
        "goodExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>"
    },
    "@typescript-eslint/no-var-requires": {
        "name": "@typescript-eslint/no-var-requires",
        "value": "off",
        "description": "禁止使用 require 来引入模块",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "no-require-imports 规则已经约束了 require"
    },
    "@typescript-eslint/prefer-for-of": {
        "name": "@typescript-eslint/prefer-for-of",
        "value": "error",
        "description": "使用 for 循环遍历数组时，如果索引仅用于获取成员，则必须使用 for of 循环替代 for 循环",
        "category": "",
        "badExample": "<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<mark class=\"eslint-error\" data-tip=\"Expected a `for-of` loop instead of a `for` loop with this simple iteration&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/prefer-for-of)&lt;/span&gt;\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></mark>",
        "goodExample": "<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> x <span class=\"token keyword\">of</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// i is used to write to arr, so for-of could not be used.</span>\n    arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// i is used independent of arr, so for-of could not be used.</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>",
        "reason": "for of 循环更加易读"
    },
    "@typescript-eslint/prefer-function-type": {
        "name": "@typescript-eslint/prefer-function-type",
        "value": "off",
        "description": "可以简写为函数类型的接口或字面类型的话，则必须简写",
        "category": "",
        "badExample": "<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>",
        "goodExample": "<span class=\"token keyword\">type</span> <span class=\"token function-variable function\">Foo2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>",
        "reason": "不要求函数类型接口的简写，因为可读性并不好。"
    },
    "@typescript-eslint/prefer-includes": {
        "name": "@typescript-eslint/prefer-includes",
        "value": "off",
        "description": "使用 includes 而不是 indexOf",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/prefer-namespace-keyword": {
        "name": "@typescript-eslint/prefer-namespace-keyword",
        "value": "error",
        "description": "禁止使用 module 来定义命名空间",
        "category": "",
        "badExample": "<mark class=\"eslint-error\" data-tip=\"Use &apos;namespace&apos; instead of &apos;module&apos; to declare custom TypeScript modules.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/prefer-namespace-keyword)&lt;/span&gt;\"><span class=\"token keyword\">module</span> Foo1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>",
        "goodExample": "<span class=\"token keyword\">namespace</span> Foo2 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>",
        "reason": "module 已成为 js 的关键字"
    },
    "@typescript-eslint/prefer-readonly": {
        "name": "@typescript-eslint/prefer-readonly",
        "value": "off",
        "description": "私有变量如果没有在构造函数外被赋值，则必须设为 readonly",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/prefer-regexp-exec": {
        "name": "@typescript-eslint/prefer-regexp-exec",
        "value": "off",
        "description": "使用 RegExp#exec 而不是 String#match",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/prefer-string-starts-ends-with": {
        "name": "@typescript-eslint/prefer-string-starts-ends-with",
        "value": "off",
        "description": "使用 String#startsWith 而不是其他方式",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/promise-function-async": {
        "name": "@typescript-eslint/promise-function-async",
        "value": "off",
        "description": "async 函数的返回值必须是 Promise",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/require-array-sort-compare": {
        "name": "@typescript-eslint/require-array-sort-compare",
        "value": "off",
        "description": "使用 sort 时必须传入比较函数",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/require-await": {
        "name": "@typescript-eslint/require-await",
        "value": "off",
        "description": "async 函数中必须存在 await 语句",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/restrict-plus-operands": {
        "name": "@typescript-eslint/restrict-plus-operands",
        "value": "off",
        "description": "使用加号时，两者必须同为数字或同为字符串",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/strict-boolean-expressions": {
        "name": "@typescript-eslint/strict-boolean-expressions",
        "value": "off",
        "description": "条件判断必须传入布尔值",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/triple-slash-reference": {
        "name": "@typescript-eslint/triple-slash-reference",
        "value": ["error", { "path": "never", "types": "always", "lib": "always" }],
        "description": "禁止使用三斜杠导入文件",
        "category": "",
        "badExample": "<span class=\"token comment\"><mark class=\"eslint-error\" data-tip=\"Do not use a triple slash reference for ./Animal, use `import` style instead.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/triple-slash-reference)&lt;/span&gt;\">/// &lt;reference path=\"./Animal\"></mark></span>",
        "goodExample": "<span class=\"token keyword\">import</span> Animal <span class=\"token keyword\">from</span> <span class=\"token string\">'./Animal'</span><span class=\"token punctuation\">;</span>",
        "reason": "三斜杠是已废弃的语法，但在类型声明文件中还是可以使用的"
    },
    "@typescript-eslint/typedef": {
        "name": "@typescript-eslint/typedef",
        "value": [
            "error",
            {
                "arrayDestructuring": false,
                "arrowParameter": false,
                "memberVariableDeclaration": false,
                "objectDestructuring": false,
                "parameter": false,
                "propertyDeclaration": true,
                "variableDeclaration": false
            }
        ],
        "description": "interface 和 type 定义时必须声明成员的类型",
        "category": "",
        "badExample": "<span class=\"token keyword\">type</span> Foo1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <mark class=\"eslint-error\" data-tip=\"expected bar to have a type annotation&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/typedef)&lt;/span&gt;\">bar<span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"expected baz to have a type annotation&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/typedef)&lt;/span&gt;\">baz<span class=\"token punctuation\">;</span></mark>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token keyword\">type</span> Foo2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    baz<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"
    },
    "@typescript-eslint/unbound-method": {
        "name": "@typescript-eslint/unbound-method",
        "value": "off",
        "description": "方法调用时需要绑定到正确的 this 上",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "统一关闭 requires type information 的规则"
    },
    "@typescript-eslint/unified-signatures": {
        "name": "@typescript-eslint/unified-signatures",
        "value": "error",
        "description": "函数重载时，若能通过联合类型将两个函数的类型声明合为一个，则使用联合类型而不是两个函数声明",
        "category": "",
        "badExample": "<span class=\"token keyword\">function</span> <span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><mark class=\"eslint-error\" data-tip=\"These overloads can be combined into one signature taking `number | string`.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(@typescript-eslint/unified-signatures)&lt;/span&gt;\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></mark></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>",
        "goodExample": "<span class=\"token keyword\">function</span> <span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"
    }
}
